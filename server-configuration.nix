# This is /etc/nixos/configuration.nix for my server.
# Replace all placeholders denoted by {{double-curly-braces}} with appropriate values.
# I used template-mapping from github.com/thejoshwolfe/util .
#   https://github.com/thejoshwolfe/util/blob/e0d5ab5f647bebec4f7e2d8b24f5669300f09f13/template-mapping
#   template-mapping -t ~/dev/config/server-configuration.nix -l /etc/nixos/configuration.nix -j /etc/nixos/configuration.nix.values.json -i -r && sudo nixos-rebuild switch

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Use the GRUB 2 boot loader.
  boot.loader.grub.enable = true;
  # boot.loader.grub.efiSupport = true;
  # boot.loader.grub.efiInstallAsRemovable = true;
  # boot.loader.efi.efiSysMountPoint = "/boot/efi";
  # Define on which hard drive you want to install Grub.
  boot.loader.grub.device = "/dev/sda";

  # networking.hostName = "nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  networking = {
    interfaces.enp4s0.ipv4.addresses = [
      {
        address = "192.168.1.100";
        prefixLength = 24;
      }
    ];
    defaultGateway = "192.168.1.1";
    nameservers = [
      "1.1.1.1" "1.0.0.1"
    ];
  };

  # Select internationalization properties.
  # i18n = {
  #   consoleFont = "Lat2-Terminus16";
  #   consoleKeyMap = "us";
  #   defaultLocale = "en_US.UTF-8";
  # };

  # Set your time zone.
  time.timeZone = "{{timezone}}";

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim
    git
    screen
    python3
    file
    lsof
    htop
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = { enable = true; enableSSHSupport = true; };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh = {
    enable = true;
    settings.PermitRootLogin = "yes";
  };

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;

  services.gitea.enable = true;
  services.gitea.useWizard = true;

  services.cron = {
    enable = true;
    systemCronJobs = [
      "0 3 * * * {{user}} /home/{{user}}/software/backup.sh"
    ];
  };

  # Register an SSL cert with Let's Encrypt.
  security.acme = {
    acceptTerms = true;
    defaults.email = "{{acme-email}}";
    certs."{{web-domain}}" = {
      # Third-party specific configuration! See https://go-acme.github.io/lego/dns/
      dnsProvider = "namecheap";
      environmentFile = "/etc/nixos/namecheap.env";
      # For me, the above config file contains two lines:
      #   NAMECHEAP_API_USER=<login user>
      #   NAMECHEAP_API_USER=<api key generated by following the namecheap docs>

      # Export the cert for nginx to use whenever the cert is renewed.
      postRun = ''
        install --owner=nginx --group=nginx --mode=766 --directory      /etc/nginx
        install --owner=nginx --group=nginx --mode=700 --directory      /etc/nginx/certs
        install --owner=nginx --group=nginx --mode=700 --directory      /etc/nginx/certs/{{web-domain}}
        install --owner=nginx --group=nginx --mode=400 cert.pem key.pem /etc/nginx/certs/{{web-domain}}/
      '';
    };
  };
  # Nginx does SSL termination, then routes to various backends.
  services.nginx = {
    enable = true;
    # Note, i couldn't figure out how to accomplish what the forceSSL option does
    # with custom port numbers without just appending verbatim config.
    # I generally found the "convenient" nixos config options lacking as of early 2025.
    appendHttpConfig = ''
      server {
        # If anyone comes here unencrypted, redirect them immediately.
        listen 0.0.0.0:8000 ;
        server_name {{web-domain}} ;
        location / {
          return 301 https://$host:4430$request_uri;
        }
      }
      server {
        listen 0.0.0.0:4430 ssl ;
        server_name {{web-domain}} ;
        http2 on;
        ssl_certificate /etc/nginx/certs/{{web-domain}}/cert.pem;
        ssl_certificate_key /etc/nginx/certs/{{web-domain}}/key.pem;

        location /groovebasin/ {
          proxy_pass http://127.0.0.1:{{groovebasin-port}}/;
          # Enable WebSockets
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $http_connection;
        }
        location / {
          # The default is groovebasin
          return 301 https://$host:4430/groovebasin/;
        }
      }
    '';
  };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;

  # Enable the X11 windowing system.
  # services.xserver.enable = true;
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e";

  # Enable touchpad support.
  # services.xserver.libinput.enable = true;

  # Enable the KDE Desktop Environment.
  # services.xserver.displayManager.sddm.enable = true;
  # services.xserver.desktopManager.plasma5.enable = true;
  virtualisation.docker = {
    enable = true;
    enableOnBoot = true;
  };

  security = {
    sudo.enable = true;
    sudo.wheelNeedsPassword = true;
  };

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users = {
    {{user}} = {
      isNormalUser = true;
      uid = 1000;
      extraGroups = [
        "wheel"
        "docker"
      ];
    };
    {{second-user}} = {
      isNormalUser = true;
      uid = 1001;
      extraGroups = [
        "docker"
      ];
      openssh.authorizedKeys.keys = [
        "{{second-user-pub-key}}"
      ];
    };
  };

  # This value determines the NixOS release with which your system is to be
  # compatible, in order to avoid breaking some software such as database
  # servers. You should change this only after NixOS release notes say you
  # should.
  system.stateVersion = "18.09"; # Did you read the comment?

}
